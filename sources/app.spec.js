var chai = require('chai')
var chaiHttp = require('chai-http')
var expect  = require("chai").expect
var Filmes = require('./filmes/filmes.model.js')

//

// ================================================================================================
// Generic Spec
var genericSpec = require('./generic/generic.spec.js')
var eVP = genericSpec.expressValidatorParam
// --
var oC_F = genericSpec.objCreateFilme
var oUF_F = genericSpec.objUpdFullFilme
var oUP_F = genericSpec.objUpdParcialFilme
var oPM_F = genericSpec.objFilmeModel
// --
var oC_U = genericSpec.objCreateUsuario
var oA_U = genericSpec.objAuthUsuario
var oPM_U = genericSpec.objUsuarioModel

// ================================================================================================
// Generic Default
var genericDefault = require('./generic/generic.default.js')
// --
var mR = genericDefault.msgResponse
var mR_F = genericDefault.msgResponseFilme
var mR_U = genericDefault.msgResponseUsuario
// --
var eMV_F = genericDefault.errorMessagesValidatorFilme
var eMV_U = genericDefault.errorMessagesValidatorUsuario
var eMV_Uauth = genericDefault.errorMessagesValidatorUsuarioAuth

// ================================================================================================
//

const port = 4002
const urlBase = `http://localhost:${port}/api`
const urlFilmes = '/filmes'
const urlUsuarios = '/usuarios'
const urlUsuariosAuth = `${urlUsuarios}/autenticar`
const tokenHeader = 'token'
var idFilmeTeste = "" // Com todas as informacoes
var idFilmeTeste2 = "" // Somente marca e modelo
var idUsuarioTeste = ""
var tokenUsuarioTeste = ""

//

chai.use(chaiHttp)

//

describe("Documentacao APIDOC", function() {
	it('Header == html', function(done) {
		chai.request(urlBase)
		.get('/doc')
		.end(function(err, res) {
			expect(res).to.be.html // header content-type = application/html
			done()
		})
	})
})
//
describe("Usuarios", function() {
	describe("Criar um novo usuario - createUser", function() {
		it('informacoes ok', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioOk)
			.end(function(err, res) {
				idUsuarioTeste = res.body._id
				expect(res).to.have.status(201)
				expect(res.body).to.have.all.keys(['message', oPM_U.param.id])
				expect(res.body.message).to.have.string(mR_U.u201)
				done()
			})
		})
		it('informacoes nok - username duplicado', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioOk)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u400duplikeyU)
				done()
			})
		})
		it('Informacoes nok - username ausente', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioUsernameAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_U.param.username)
				expect(ret.msg).to.have.string(eMV_U.username)
				done()
			})
		})
		it('Informacoes nok - username branco', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioUsernameBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.username)
				expect(ret.msg).to.have.string(eMV_U.username)
				expect(ret.value).to.have.string(oC_U.usuarioUsernameBranco.username)
				done()
			})
		})
		it('Informacoes nok - username espaço', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioUsernameEspaco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.username)
				expect(ret.msg).to.have.string(eMV_U.username)
				expect(ret.value).to.have.string(oC_U.usuarioUsernameEspaco.username)
				done()
			})
		})
		it('Informacoes nok - username caracter especial', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioUsernameCaracterEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.username)
				expect(ret.msg).to.have.string(eMV_U.username)
				expect(ret.value).to.have.string(oC_U.usuarioUsernameCaracterEspecial.username)
				done()
			})
		})
		it('Informacoes nok - password ausente', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				done()
			})
		})
		it('Informacoes nok - password branco', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				expect(ret.value).to.have.string(oC_U.usuarioPasswordBranco.password)
				done()
			})
		})
		it('Informacoes nok - password espaço', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordEspaco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				expect(ret.value).to.have.string(oC_U.usuarioPasswordEspaco.password)
				done()
			})
		})
		it('Informacoes nok - password sem número', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordSemNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				expect(ret.value).to.have.string(oC_U.usuarioPasswordSemNumero.password)
				done()
			})
		})
		it('Informacoes nok - password sem letra minúscula', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordSemMinusculo)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				expect(ret.value).to.have.string(oC_U.usuarioPasswordSemMinusculo.password)
				done()
			})
		})
		it('Informacoes nok - password sem letra maiúscula', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordSemMaiusculo)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				expect(ret.value).to.have.string(oC_U.usuarioPasswordSemMaiusculo.password)
				done()
			})
		})
		it('Informacoes nok - password com caracter especial', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioPasswordCaracterEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_U.password)
				expect(ret.value).to.have.string(oC_U.usuarioPasswordCaracterEspecial.password)
				done()
			})
		})
		it('Informacoes nok - email invalido', function(done) {
			chai.request(urlBase)
			.post(urlUsuarios)
			.send(oC_U.usuarioEmailInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.email)
				expect(ret.msg).to.have.string(eMV_U.email)
				expect(ret.value).to.have.string(oC_U.usuarioEmailInvalido.email)
				done()
			})
		})
	})
	//
	describe("Autenticar um usuario - authenticate", function() {
		it('informacoes ok', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioOk)
			.end(function(err, res) {
				tokenUsuarioTeste = res.body.token
				// console.log(`token gerado [${tokenUsuarioTeste}]`)
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message', oPM_U.param.token])
				expect(res.body.message).to.have.string(mR_U.u200auth)
				done()
			})
		})
		it('Informacoes nok - username ausente', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioUsernameAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_U.param.username)
				expect(ret.msg).to.have.string(eMV_Uauth.username)
				done()
			})
		})
		it('Informacoes nok - password ausente', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioPasswordAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_U.param.password)
				expect(ret.msg).to.have.string(eMV_Uauth.password)
				done()
			})
		})
		it('Informacoes nok - expiresIn branco', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioExpiresBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.expiresIn)
				expect(ret.msg).to.have.string(eMV_Uauth.expiresIn)
				expect(ret.value).to.have.string(oA_U.usuarioExpiresBranco.expiresIn)
				done()
			})
		})
		it('Informacoes nok - expiresIn espaco', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioExpiresEspaco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.expiresIn)
				expect(ret.msg).to.have.string(eMV_Uauth.expiresIn)
				expect(ret.value).to.have.string(oA_U.usuarioExpiresEspaco.expiresIn)
				done()
			})
		})
		it('Informacoes nok - expiresIn ponto', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioExpiresPonto)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.expiresIn)
				expect(ret.msg).to.have.string(eMV_Uauth.expiresIn)
				expect(ret.value).to.have.string(oA_U.usuarioExpiresPonto.expiresIn)
				done()
			})
		})
		it('Informacoes nok - expiresIn virgula', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioExpiresVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.expiresIn)
				expect(ret.msg).to.have.string(eMV_Uauth.expiresIn)
				expect(ret.value).to.have.string(oA_U.usuarioExpiresVirgula.expiresIn)
				done()
			})
		})
		it('Informacoes nok - expiresIn letra', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioExpiresLetra)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.expiresIn)
				expect(ret.msg).to.have.string(eMV_Uauth.expiresIn)
				expect(ret.value).to.have.string(oA_U.usuarioExpiresLetra.expiresIn)
				done()
			})
		})
		it('Informacoes nok - expiresIn tipo', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioExpiresTipo)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_U.param.expiresIn)
				expect(ret.msg).to.have.string(eMV_Uauth.expiresIn)
				expect(ret.value).to.have.string(oA_U.usuarioExpiresTipo.expiresIn)
				done()
			})
		})
		it('Informacoes nok - username incorreto', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioUsernameIncorreto)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u404)
				done()
			})
		})
		it('Informacoes nok - password incorreto', function(done) {
			chai.request(urlBase)
			.post(urlUsuariosAuth)
			.send(oA_U.usuarioPasswordIncorreto)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u404)
				done()
			})
		})
	})
	//
	describe("Apagar um usuario - del", function() {
		it('Usuário não encontrado', function(done) {
			var idUsuarioTeste404 = idUsuarioTeste.replace(/0/g, 'f').replace(/1/g, 2).replace(/2/g, 'b').replace(/3/g, 4).replace(/4/g, 'a')
			chai.request(urlBase)
			.delete(`${urlUsuarios}/${idUsuarioTeste404}`)
			.set(tokenHeader, 'brum')
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u404)
				done()
			})
		})
	})
})
//
describe("Filmes", function() {
	describe("Recuperar todos os filmes - getAll", function() {
		it('Sem token', function(done) {
			chai.request(urlBase)
			.get(urlFilmes)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u400token)
				done()
			})
		})
		it('Token invalido', function(done) {
			var tokenUsuarioTeste401 = tokenUsuarioTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.get(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste401)
			.end(function(err, res) {
				expect(res).to.have.status(401)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u401token)
				done()
			})
		})
		it('Header == json', function(done) {
			chai.request(urlBase)
			.get(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.be.json // header content-type = application/json
				done()
			})
		})
		it('Status == 200', function(done) {
			chai.request(urlBase)
			.get(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				done()
			})
		})
		it('Body == Array', function(done) {
			chai.request(urlBase)
			.get(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res.body).to.be.instanceof(Array)
				done()
			})
		})
		it('Campos ok', function(done) {
			chai.request(urlBase)
			.get(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				if (res.body.length > 0) {
					var ret = res.body.shift()
					expect(ret).to.have.all.keys(oPM_F.arrayKeys)
					expect(ret).to.not.have.all.keys([oPM_F.param.v])
				}
				done()
			})
		})
	})
	//
	describe("Cadastrar um filme - create", function() {
		it('Sem token', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u400token)
				done()
			})
		})
		it('Token invalido', function(done) {
			var tokenUsuarioTeste401 = tokenUsuarioTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste401)
			.end(function(err, res) {
				expect(res).to.have.status(401)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u401token)
				done()
			})
		})
		it('Informacoes ok - todos os campos', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeOk)
			.end(function(err, res) {
				idFilmeTeste = res.body._id
				expect(res).to.have.status(201)
				expect(res.body).to.have.all.keys(['message', oPM_F.param.id])
				expect(res.body.message).to.have.string(mR_F.f201)
				done()
			})
		})
		it('Informacoes ok - somente nome', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeOkMini)
			.end(function(err, res) {
				idFilmeTeste2 = res.body._id // guardar o id do carro criado para usar nos outros testes
				expect(res).to.have.status(201)
				expect(res.body).to.have.all.keys(['message', oPM_F.param.id])
				expect(res.body.message).to.have.string(mR_F.f201)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_F.param.nome)
				expect(ret.msg).to.have.string(eMV_F.nome)
				done()
			})
		})
		it('Informacoes nok - sinopse em branco', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeSinopseBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.sinopse)
				expect(ret.msg).to.have.string(eMV_F.sinopse)
				expect(ret.value).to.have.string(oC_F.filmeSinopseBranco.sinopse)
				done()
			})
		})
		it('Informacoes nok - diretor em branco', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDiretorBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.diretor)
				expect(ret.msg).to.have.string(eMV_F.diretor)
				expect(ret.value).to.have.string(oC_F.filmeDiretorBranco.diretor)
				done()
			})
		})
		it('Informacoes nok - elenco nao array', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeElencoNaoArray)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				expect(ret.value).to.have.string(oC_F.filmeElencoNaoArray.elenco)
				done()
			})
		})
		it('Informacoes nok - elenco array vazio', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeElencoArrayVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				expect(ret.value).to.have.lengthOf(0)
				done()
			})
		})
		it('Informacoes nok - elenco array com numeros', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeElencoArrayNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oC_F.filmeElencoArrayNumero.elenco[i])
				}
				done()
			})
		})
		it('Informacoes nok - elenco array posicao branco', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeElencoArrayPosicaoBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oC_F.filmeElencoArrayPosicaoBranco.elenco[i])
				}
				done()
			})
		})
		it('Informacoes nok - data lancamento ano invalido', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDataLancamentoAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oC_F.filmeDataLancamentoAnoInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento mes invalido', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDataLancamentoMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oC_F.filmeDataLancamentoMesInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento dia invalido', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDataLancamentoDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oC_F.filmeDataLancamentoDiaInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento string invalido', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDataLancamentoStringInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oC_F.filmeDataLancamentoStringInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - duracao vazia', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDuracaoVazia)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.duracao)
				expect(ret.msg).to.have.string(eMV_F.duracao)
				expect(ret.value).to.have.string(oC_F.filmeDuracaoVazia.duracao)
				done()
			})
		})
		it('Informacoes nok - duracao invalida', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeDuracaoInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.duracao)
				expect(ret.msg).to.have.string(eMV_F.duracao)
				expect(ret.value).to.have.string(oC_F.filmeDuracaoInvalida.duracao)
				done()
			})
		})
		it('Informacoes nok - genero nao array', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeGeneroNaoArray)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				expect(ret.value).to.have.string(oC_F.filmeGeneroNaoArray.genero)
				done()
			})
		})
		it('Informacoes nok - genero array vazio', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeGeneroArrayVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				expect(ret.value).to.have.lengthOf(0)
				done()
			})
		})
		it('Informacoes nok - genero array com numeros', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeGeneroArrayNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oC_F.filmeGeneroArrayNumero.genero[i])
				}
				done()
			})
		})
		it('Informacoes nok - genero array posicao branco', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeGeneroArrayPosicaoBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oC_F.filmeGeneroArrayPosicaoBranco.genero[i])
				}
				done()
			})
		})
		it('Informacoes nok - rating vazio', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeRatingVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oC_F.filmeRatingVazio.rating)
				done()
			})
		})
		it('Informacoes nok - rating virgula', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeRatingVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oC_F.filmeRatingVirgula.rating)
				done()
			})
		})
		it('Informacoes nok - rating invalida', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmeRatingInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oC_F.filmeRatingInvalida.rating)
				done()
			})
		})
		it('Informacoes nok - país vazio', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmePaisVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oC_F.filmePaisVazio.pais)
				done()
			})
		})
		it('Informacoes nok - país numero', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmePaisNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oC_F.filmePaisNumero.pais)
				done()
			})
		})
		it('Informacoes nok - país caracter especial', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmePaisCharEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oC_F.filmePaisCharEspecial.pais)
				done()
			})
		})
		it('Informacoes nok - país tamanho', function(done) {
			chai.request(urlBase)
			.post(urlFilmes)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oC_F.filmePaisTamanho)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oC_F.filmePaisTamanho.pais)
				done()
			})
		})
	})
	//
	describe("Recuperar um filme - getOne", function() {
		it('Sem token', function(done) {
			chai.request(urlBase)
			.get(`${urlFilmes}/${idFilmeTeste}`)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u400token)
				done()
			})
		})
		it('Token invalido', function(done) {
			var tokenUsuarioTeste401 = tokenUsuarioTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.get(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste401)
			.end(function(err, res) {
				expect(res).to.have.status(401)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_U.u401token)
				done()
			})
		})
		it('Filme não encontrado', function(done) {
			var idFilmeTeste404 = idFilmeTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.get(`${urlFilmes}/${idFilmeTeste404}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f404)
				done()
			})
		})
		it('Filme encontrado', function(done) {
			chai.request(urlBase)
			.get(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(oPM_F.arrayKeys)
				expect(res.body).to.not.have.all.keys([oPM_F.param.v])
				done()
			})
		})
	})
	//
	describe("Atualizar um filme - updFull (put)", function() {
		it('Filme não encontrado', function(done) {
			var idFilmeTeste404 = idFilmeTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste404}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeOk)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f404)
				done()
			})
		})
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeOk)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f200upd)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_F.param.nome)
				expect(ret.msg).to.have.string(eMV_F.nome)
				done()
			})
		})
		it('Informacoes nok - sinopse em branco', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeSinopseBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.sinopse)
				expect(ret.msg).to.have.string(eMV_F.sinopse)
				expect(ret.value).to.have.string(oUF_F.filmeSinopseBranco.sinopse)
				done()
			})
		})
		it('Informacoes nok - diretor em branco', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDiretorBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.diretor)
				expect(ret.msg).to.have.string(eMV_F.diretor)
				expect(ret.value).to.have.string(oUF_F.filmeDiretorBranco.diretor)
				done()
			})
		})
		it('Informacoes nok - elenco nao array', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeElencoNaoArray)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				expect(ret.value).to.have.string(oUF_F.filmeElencoNaoArray.elenco)
				done()
			})
		})
		it('Informacoes nok - elenco array vazio', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeElencoArrayVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				expect(ret.value).to.have.lengthOf(0)
				done()
			})
		})
		it('Informacoes nok - elenco array com numeros', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeElencoArrayNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUF_F.filmeElencoArrayNumero.elenco[i])
				}
				done()
			})
		})
		it('Informacoes nok - elenco array posicao branco', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeElencoArrayPosicaoBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUF_F.filmeElencoArrayPosicaoBranco.elenco[i])
				}
				done()
			})
		})
		it('Informacoes nok - data lancamento ano invalido', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDataLancamentoAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUF_F.filmeDataLancamentoAnoInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento mes invalido', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDataLancamentoMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUF_F.filmeDataLancamentoMesInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento dia invalido', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDataLancamentoDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUF_F.filmeDataLancamentoDiaInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento string invalido', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDataLancamentoStringInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUF_F.filmeDataLancamentoStringInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - duracao vazia', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDuracaoVazia)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.duracao)
				expect(ret.msg).to.have.string(eMV_F.duracao)
				expect(ret.value).to.have.string(oUF_F.filmeDuracaoVazia.duracao)
				done()
			})
		})
		it('Informacoes nok - duracao invalida', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeDuracaoInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.duracao)
				expect(ret.msg).to.have.string(eMV_F.duracao)
				expect(ret.value).to.have.string(oUF_F.filmeDuracaoInvalida.duracao)
				done()
			})
		})
		it('Informacoes nok - genero nao array', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeGeneroNaoArray)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				expect(ret.value).to.have.string(oUF_F.filmeGeneroNaoArray.genero)
				done()
			})
		})
		it('Informacoes nok - genero array vazio', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeGeneroArrayVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				expect(ret.value).to.have.lengthOf(0)
				done()
			})
		})
		it('Informacoes nok - genero array com numeros', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeGeneroArrayNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUF_F.filmeGeneroArrayNumero.genero[i])
				}
				done()
			})
		})
		it('Informacoes nok - genero array posicao branco', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeGeneroArrayPosicaoBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUF_F.filmeGeneroArrayPosicaoBranco.genero[i])
				}
				done()
			})
		})
		it('Informacoes nok - rating vazio', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeRatingVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oUF_F.filmeRatingVazio.rating)
				done()
			})
		})
		it('Informacoes nok - rating virgula', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeRatingVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oUF_F.filmeRatingVirgula.rating)
				done()
			})
		})
		it('Informacoes nok - rating invalida', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmeRatingInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oUF_F.filmeRatingInvalida.rating)
				done()
			})
		})
		it('Informacoes nok - pais vazio', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmePaisVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUF_F.filmePaisVazio.pais)
				done()
			})
		})
		it('Informacoes nok - pais numero', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmePaisNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUF_F.filmePaisNumero.pais)
				done()
			})
		})
		it('Informacoes nok - pais caracter especial', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmePaisCharEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUF_F.filmePaisCharEspecial.pais)
				done()
			})
		})
		it('Informacoes nok - pais tamanho', function(done) {
			chai.request(urlBase)
			.put(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUF_F.filmePaisTamanho)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUF_F.filmePaisTamanho.pais)
				done()
			})
		})
	})
	//
	describe("Atualizar um filme - updParcial (patch)", function() {
		it('Filme não encontrado', function(done) {
			var idFilmeTeste404 = idFilmeTeste.replace(/0/g, 9).replace(/1/g, 8).replace(/2/g, 7).replace(/3/g, 6).replace(/4/g, 5)
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste404}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeOk)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f404)
				done()
			})
		})
		it('Informacoes ok', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeOk)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f200upd)
				done()
			})
		})
		it('Informacoes nok - nome ausente', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeNomeAusente)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array2)
				expect(ret.param).to.have.string(oPM_F.param.nome)
				expect(ret.msg).to.have.string(eMV_F.nome)
				done()
			})
		})
		it('Informacoes nok - sinopse em branco', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeSinopseBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.sinopse)
				expect(ret.msg).to.have.string(eMV_F.sinopse)
				expect(ret.value).to.have.string(oUP_F.filmeSinopseBranco.sinopse)
				done()
			})
		})
		it('Informacoes nok - diretor em branco', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDiretorBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.diretor)
				expect(ret.msg).to.have.string(eMV_F.diretor)
				expect(ret.value).to.have.string(oUP_F.filmeDiretorBranco.diretor)
				done()
			})
		})
		it('Informacoes nok - elenco nao array', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeElencoNaoArray)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				expect(ret.value).to.have.string(oUP_F.filmeElencoNaoArray.elenco)
				done()
			})
		})
		it('Informacoes nok - elenco array vazio', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeElencoArrayVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				expect(ret.value).to.have.lengthOf(0)
				done()
			})
		})
		it('Informacoes nok - elenco array com numeros', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeElencoArrayNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUP_F.filmeElencoArrayNumero.elenco[i])
				}
				done()
			})
		})
		it('Informacoes nok - elenco array posicao branco', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeElencoArrayPosicaoBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.elenco)
				expect(ret.msg).to.have.string(eMV_F.elenco)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUP_F.filmeElencoArrayPosicaoBranco.elenco[i])
				}
				done()
			})
		})
		it('Informacoes nok - data lancamento ano invalido', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDataLancamentoAnoInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUP_F.filmeDataLancamentoAnoInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento mes invalido', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDataLancamentoMesInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUP_F.filmeDataLancamentoMesInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento dia invalido', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDataLancamentoDiaInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUP_F.filmeDataLancamentoDiaInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - data lancamento string invalido', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDataLancamentoStringInvalido)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.data_lancamento)
				expect(ret.msg).to.have.string(eMV_F.data_lancamento)
				expect(ret.value).to.have.string(oUP_F.filmeDataLancamentoStringInvalido.data_lancamento)
				done()
			})
		})
		it('Informacoes nok - duracao vazia', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDuracaoVazia)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.duracao)
				expect(ret.msg).to.have.string(eMV_F.duracao)
				expect(ret.value).to.have.string(oUP_F.filmeDuracaoVazia.duracao)
				done()
			})
		})
		it('Informacoes nok - duracao invalida', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeDuracaoInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.duracao)
				expect(ret.msg).to.have.string(eMV_F.duracao)
				expect(ret.value).to.have.string(oUP_F.filmeDuracaoInvalida.duracao)
				done()
			})
		})
		it('Informacoes nok - genero nao array', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeGeneroNaoArray)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				expect(ret.value).to.have.string(oUP_F.filmeGeneroNaoArray.genero)
				done()
			})
		})
		it('Informacoes nok - genero array vazio', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeGeneroArrayVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				expect(ret.value).to.have.lengthOf(0)
				done()
			})
		})
		it('Informacoes nok - genero array com numeros', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeGeneroArrayNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUP_F.filmeGeneroArrayNumero.genero[i])
				}
				done()
			})
		})
		it('Informacoes nok - genero array posicao branco', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeGeneroArrayPosicaoBranco)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.genero)
				expect(ret.msg).to.have.string(eMV_F.genero)
				for (i = 0; i < ret.value.length; i++) {
					expect(ret.value[i]).to.equal(oUP_F.filmeGeneroArrayPosicaoBranco.genero[i])
				}
				done()
			})
		})
		it('Informacoes nok - rating vazio', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeRatingVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oUP_F.filmeRatingVazio.rating)
				done()
			})
		})
		it('Informacoes nok - rating virgula', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeRatingVirgula)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oUP_F.filmeRatingVirgula.rating)
				done()
			})
		})
		it('Informacoes nok - rating invalida', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmeRatingInvalida)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.rating)
				expect(ret.msg).to.have.string(eMV_F.rating)
				expect(ret.value).to.have.string(oUP_F.filmeRatingInvalida.rating)
				done()
			})
		})
		it('Informacoes nok - pais vazio', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmePaisVazio)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUP_F.filmePaisVazio.pais)
				done()
			})
		})
		it('Informacoes nok - pais numero', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmePaisNumero)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUP_F.filmePaisNumero.pais)
				done()
			})
		})
		it('Informacoes nok - pais caracter especial', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmePaisCharEspecial)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUP_F.filmePaisCharEspecial.pais)
				done()
			})
		})
		it('Informacoes nok - pais tamanho', function(done) {
			chai.request(urlBase)
			.patch(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.send(oUP_F.filmePaisTamanho)
			.end(function(err, res) {
				expect(res).to.have.status(400)
				expect(res.body).to.be.instanceof(Array)
				var ret = res.body.shift()
				expect(ret).to.have.all.keys(eVP.array3)
				expect(ret.param).to.have.string(oPM_F.param.pais)
				expect(ret.msg).to.have.string(eMV_F.pais)
				expect(ret.value).to.have.string(oUP_F.filmePaisTamanho.pais)
				done()
			})
		})
	})
	//
	describe("Apagar um filme - del", function() {
		it('Filme não encontrado', function(done) {
			var idFilmeTeste404 = idFilmeTeste.replace(/0/g, 'f').replace(/1/g, 2).replace(/2/g, 'b').replace(/3/g, 4).replace(/4/g, 'a')
			chai.request(urlBase)
			.delete(`${urlFilmes}/${idFilmeTeste404}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(404)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f404)
				done()
			})
		})
		it('Informacoes ok - todos os campos', function(done) {
			chai.request(urlBase)
			.delete(`${urlFilmes}/${idFilmeTeste}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f200del)
				done()
			})
		})
		it('Informacoes ok - somente nome', function(done) {
			chai.request(urlBase)
			.delete(`${urlFilmes}/${idFilmeTeste2}`)
			.set(tokenHeader, tokenUsuarioTeste)
			.end(function(err, res) {
				expect(res).to.have.status(200)
				expect(res.body).to.have.all.keys(['message'])
				expect(res.body.message).to.have.string(mR_F.f200del)
				done()
			})
		})
	})
})
//
describe("Validar parametros", function() {
	it('ID nok', function(done) {
		chai.request(urlBase)
		.get(`${urlFilmes}/67678hgjh66`)
		.set(tokenHeader, tokenUsuarioTeste)
		.end(function(err, res) {
			expect(res).to.have.status(400)
			expect(res.body).to.have.all.keys(['message'])
			expect(res.body.message).to.have.string(mR.id400)
			done()
		})
	})
})
//
describe("Apagar usuário e invalidar token", function() {
	it('Informacoes ok - apagar usuario', function(done) {
		chai.request(urlBase)
		.delete(`${urlUsuarios}/${idUsuarioTeste}`)
		.set(tokenHeader, tokenUsuarioTeste)
		.end(function(err, res) {
			expect(res).to.have.status(200)
			expect(res.body).to.have.all.keys(['message'])
			expect(res.body.message).to.have.string(mR_U.u200del)
			done()
		})
	})
	it('Recuperar todos os filmes - token invalido', function(done) {
		chai.request(urlBase)
		.get(urlFilmes)
		.set(tokenHeader, tokenUsuarioTeste)
		.end(function(err, res) {
			expect(res).to.have.status(401)
			expect(res.body).to.have.all.keys(['message'])
			expect(res.body.message).to.have.string(mR_U.u401token)
			done()
		})
	})
})
//
describe("EXEMPLO", function() {

})
//
